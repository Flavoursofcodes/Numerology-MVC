var express = require('express');
const session = require('express-session')
const MongoDBSession = require('connect-mongodb-session')(session)
const mongoose = require('mongoose');
const conn = require('../db')
const app = express()
var path = require('path');
const url = require('url')
var verifiedUser = ''
var cookieParser = require('cookie-parser');
const async = require('async')
const nodemailer = require('nodemailer')
const crypto = require('crypto')
const bodyParser = require('body-parser')
const { read } = require('fs');
const { log } = require('console');



app.use(bodyParser.urlencoded({
  extended: false
}))
app.use(bodyParser.json())

// app.use(session({
//   secret:"UCMHP ACADEMY",
//   resave:true,
//   saveUninitialized:true,
// }))

var userSchema = new mongoose.Schema({
  fullname: String,
  username: String,
  password: String,
  email: String,
  filesGenerated: Number,
  firstLogin: Boolean
});

let dataModel = mongoose.model('users', userSchema);

exports.home = function (req, res) {
  //  console.log("login session"+req.session)
  res.render('login')
}


//------------------------------Function for logging in users-----------------------------------------------------------

exports.auth = function (req, res) {
  res.set('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');
  console.log(req.session);
  var user = req.body.username;
  var pass = req.body.password;



  if ((user === "admin" && pass === "Ac7286722")) { //These are the hard coded admin credentials.
    conn.collection('datas').find({}).toArray((err, result) => {
      if (err) console.log(err);

      req.session.user = { 'user': user, 'role': 'fullaccess' }
      console.log(result);
      res.cookie('credentials', {
          'user': user,
          'pass': 'restricted'
      });
      req.session.save(() => {
        res.render('adminLandingPage', {
          userData: result
        });
      })
    })
  } else {
    conn.collection('users').find({
      username: user
    }).toArray((err, result) => {
      if (err) console.log(err);
      //console.log(result);
      else if (result[0] == undefined) { //If username is not there in db.
        // res.clearCookie('credentials');
        res.send('Username or password mismatch.')
      } else if (result[0].password === pass) {
        verifiedUser = user
        res.cookie('credentials', {
            'user': user,
            'pass': 'restricted',
            'fullname': result[0].fullname
        });
        req.session.user = { 'user': user, 'fullname': result[0].fullname }
        req.session.save(() => {
          if (result[0].firstLogin == true) {
            res.redirect('/setPassword')
          } else if (result[0].firstLogin == false) {
            res.render('application');

          }
        })

      } else //if password doesn't match
      {
        res.clearCookie('credentials');
        res.send('Username or password mismatch.')
      }
    })

  }
}

// exports.wordtopdf = function (req, res) {
//     res.sendFile(path.join(__dirname, 'views') + '/wordtopdf.html');
// }

//---------------------------Render this page on clicking 'Home' in the user's profile-----------------------------------

exports.renderApplicationPage = function (req, res) {
  if (req.session.user) {
    res.render('application.ejs')
  }
  else
    res.render('login')
}

//--------------------------Render this page on clicking 'Home' in the Admin's profile------------------------------------

exports.renderAdminLandingPage = function (req, res) {
  if (req.session.user) {
    conn.collection('datas').find({}).toArray((err, result) => {
      if (err) console.log(err);
      //console.log(result);

      res.render('adminLandingPage.ejs', {
        userData: result
      });
    })
  }
  else
    res.render('login')
}
//----------------------------Get Previous reports generated by the User --------------------------------------------------------------

exports.getReportPDF = function (req, res) {
  if (req.session.user) {

    const queryObject = url.parse(req.url, true).query;
    var string = JSON.stringify(queryObject);
    var objectValue = JSON.parse(string);
    console.log(string);
    console.log(req.cookies.credentials);
  
    var fileName = path.join(__dirname, `../out/${objectValue['fileName']}`)
    console.log(fileName);
  
    if (req.cookies.credentials.user === 'admin' && req.cookies.credentials.pass === 'Ac7286722') {
      res.sendFile(fileName);
    } else {
      // console.log(req.cookies.credentials.user);
      // console.log(objectValue['fileName']);
      conn.collection('datas').findOne({
        user: req.cookies.credentials.user,
        pdfName: objectValue['fileName']
      }, (err, data) => {
        if (err) console.log(err);
        else if (!data) {
          //console.log(data);
          res.send('Not authorised.')
        } else res.sendFile(fileName);
      })
    }
  
    //res.send('Administrator only.')

  }
  else
    res.render('login')
  //res.send('Administrator only.')
}

//----------------------------Delete Users from the list of the users in the Admin Panel-----------------------------------

exports.deleteData = function (req, res) {
  if (req.session.user) {
    var query = {
      _id: new mongoose.Types.ObjectId(req.params.id)
    };

    conn.collection('datas').deleteOne(query, (err, obj) => {
      if (err) return res.status(400)
      else {
        console.log(obj.result.n + ' document deleted');
        res.redirect('/renderAdminLandingPage')
      }
    });
  }
  else
    res.render('login')
}

//----------------------Render updateUsers template to update the user's data on the Admin Panel-------------------------

exports.updateData = async function (req, res) {
  if (req.session.user) {
    var query = {
      _id: new mongoose.Types.ObjectId(req.params.id)
    };
    // console.log(query);
    var user = await dataModel.findById(query._id);
    res.render('updateUsers', { users: user })
  }
  else
    res.render('login')
}

//----------------------------Update user details on clicking 'Submit Now!' on Admin Panel------------------------------------------

exports.postData = function (req, res) {
  if (req.session.user) {
    console.log(req.params);

    dataModel.findOneAndUpdate({ _id: req.params.id }, {
      $set: {
        fullname: req.body.fullname,
        email: req.body.email,
        password: req.body.password
      }
    }, (err, obj) => {
      if (err) return res.status(400)
      else {
        console.log(obj);
        // console.log(obj.result.n + ' document delected');
        res.redirect('/users')
      }
    });
  }
  else
    res.render('login')
}

//--------------------------------- Render AddUser Template on clicking 'Add User' in Admin Panel---------------------------

exports.addUser = function (req, res) {
  if (req.session.user) {

    res.render('./addUser.ejs')
  }
  else
    res.render('login')
}

//----------------------------------Add new users to the database------------------------------------------------------------------------

exports.addNewUserToDb = function (req, res) {
  if (req.session.user) {
    const queryObject = url.parse(req.url, true).query;
    var string = JSON.stringify(queryObject);
    var objectValue = JSON.parse(string);

    let newUser = new dataModel({
      fullname: objectValue['fullname'],
      username: objectValue['username'],
      password: objectValue['password'],
      email: objectValue['email'],
      filesGenerated: 0,
      firstLogin: false
    })

    newUser.save((err) => {
      if (err) console.log(err);

      console.log('New user created');

    })
    res.redirect('/users')
  }
  res.render('login')
}

//-------------------------------------- Display the users from the database---------------------------------------------

exports.users = function (req, res) {
  if (req.session.user) {
    conn.collection('users').find({}).toArray((err, result) => {
      if (err) console.log(err);
      // console.log(result);

      res.render('./displayUsers', {
        users: result
      });
    })
  }
  else
    res.render('login')
}

//------------------------------------ Delete the user from the database------------------------------------------------------


exports.deleteUser = function (req, res) {
  if (req.session.user) {
    var query = {
      _id: new mongoose.Types.ObjectId(req.params.id)
    };

    conn.collection('users').deleteOne(query, (err, obj) => {
      if (err) return res.status(400)
      else {
        console.log(obj.result.n + ' user delected');
        res.redirect('/users')
      }
    });
  }
  else
    res.render('login')

}
// ----------------------------------------------Logout of the profile--------------------------------------------------

exports.logout = function (req, res) {
  req.session.destroy()
  res.render('login')

}

// -----------------------------------------------EXTRAS---------------------------------------------------------------------------------------------------------

// exports.forgotPassword = function (req, res) {
//   if (req.session.user) {
//     console.log(req.body.username);
//     async.waterfall([
//       function (done) {
//         crypto.randomBytes(20, (err, buf) => {
//           var token = buf.toString('hex');
//           done(err, token)
//         });
//       },
//       function (token, done) {
//         conn.collection('users').findOne({
//           username: req.body.username
//         }, (err, user) => {
//           if (!user) {
//             res.send('No account with that username exists.');
//             return res.redirect('/forgotPassword')
//           }

//           user.resetPasswordToken = token;
//           user.resetPasswordExpire = Date.now() + 3600000 //1hr

//           conn.collection('users').findOneAndUpdate({
//             username: user.username
//           }, {
//             $set: {
//               resetPasswordToken: user.resetPasswordToken,
//               resetPasswordExpire: user.resetPasswordExpire
//             }
//           }, (err) => {
//             if (err) console.log(err);
//             done(err, token, user);
//           });

//           // user.save(function(err){
//           //     done(err,token,user);
//           // });
//         });
//       },
//       function (token, user, done) {
//         var smtpTransport = nodemailer.createTransport({
//           service: 'Gmail',
//           auth: {
//             type: 'OAuth2',
//             user: '', // ====> email goes here inside quotes.
//             pass: '', //====> password of the email provided above goes inside quotes.
//             clientId: '', //====> clienId in quotes
//             clientSecret: '', //====>cilent secret
//             refreshToken: '' //====>refresh token
//           }
//         });

//         var mailOptions = {
//           to: user.email,
//           from: 'kronostournaments@gmail.com', //email goes here
//           subject: 'NodeJs pass reset',
//           text: 'click on http://' + req.headers.host + '/reset/' + token //--> token link to reset password.
//         };

//         smtpTransport.sendMail(mailOptions, function (err) {
//           console.log('mail sent');
//           //req.flash('success','An email has been sent to '+user.email);
//           done(err, 'done')
//         });
//       }
//     ], function (err) {
//       if (err) console.log(err);;
//       res.redirect('/forgotPassword')
//     });


//     exports.reset = function (req, res) {
//       if (req.params.token === '') {
//         res.redirect('/forgotPassword')
//       }
//       conn.collection('users').findOne({
//         resetPasswordToken: req.params.token,
//         resetPasswordExpire: {
//           $gt: Date.now()
//         }
//       }, (err, user) => {
//         if (!user) {
//           res.send("Password reset token is invalid or has expired.");
//           return read.redirect('/forgotPassword')
//         }
//         res.render('passwordReset', {
//           token: req.params.token
//         })
//       })
//     }

//   }
//   else
//     res.render('login')
// }

// exports.postReset = function (req, res) {
//   if (req.session.user) {
//     async.waterfall([
//       function (done) {
//         conn.collection('users').findOne({
//           resetPasswordToken: req.body.token,
//           resetPasswordExpire: {
//             $gt: Date.now()
//           }
//         }, (err, user) => {
//           if (!user) {
//             res.send("Password reset token is invalid or has expired.");
//             return res.redirect('/forgotPassword')
//           }
//           if (req.body.newPassword === req.body.reEnterPassword) {
//             conn.collection('users').findOneAndUpdate({
//               resetPasswordToken: req.body.token,
//               resetPasswordExpire: {
//                 $gt: Date.now()
//               }
//             }, {
//               $set: {
//                 resetPasswordToken: '',
//                 resetPasswordExpire: '',
//                 password: req.body.newPassword
//               }
//             })
//             res.redirect('/')
//           }

//         })
//       }
//     ])
//   }
//   else
//     res.render('login')
// }

// exports.setPassword = function (req, res) {
//   if (req.session.user) {
//     async.waterfall([
//       function (done) {
//         crypto.randomBytes(20, (err, buf) => {
//           var token = buf.toString('hex');
//           done(err, token)
//         });
//       },
//       function (token, done) {
//         conn.collection('users').findOne({
//           username: req.cookies.credentials.user
//         }, (err, user) => {
//           if (err) console.log(err);

//           if (!user) {
//             req.send('No account with that username exists.');
//             return res.redirect('/forgotPassword')
//           }

//           user.resetPasswordToken = token;
//           user.resetPasswordExpire = Date.now() + 3600000 //1hr

//           conn.collection('users').findOneAndUpdate({
//             username: user.username
//           }, {
//             $set: {
//               resetPasswordToken: user.resetPasswordToken,
//               resetPasswordExpire: user.resetPasswordExpire,
//               firstLogin: false
//             }
//           }, (err) => {
//             if (err) console.log(err);
//             done(err, token, user);
//           });

//           // user.save(function(err){
//           //     done(err,token,user);
//           // });
//         });
//       },
//       function (token, user, done) {
//         var smtpTransport = nodemailer.createTransport({
//           service: 'Gmail',
//           auth: {
//             type: 'OAuth2',
//             user: '', // ====> email goes here inside quotes.
//             pass: '', //====> password of the email provided above goes inside quotes.
//             clientId: '', //====> clienId in quotes
//             clientSecret: '', //====>cilent secret
//             refreshToken: '' //====>refresh token
//           }
//         });

//         var mailOptions = {
//           to: user.email,
//           from: 'kronostournaments@gmail.com', //====>email goes here
//           subject: 'NodeJs pass reset',
//           text: 'click on http://' + req.headers.host + '/reset/' + token //--> token link to reset password.
//         };

//         smtpTransport.sendMail(mailOptions, function (err) {
//           console.log('mail sent');
//           //req.flash('success','An email has been sent to '+user.email);
//           done(err, 'done')
//         });
//       }
//     ], function (err) {
//       if (err) console.log(err);;
//       res.render('notificationSetPasswordLinkSent')
//     });
//   }
//   else
//     res.render('login')
// }